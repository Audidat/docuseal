# Caddyfile for DocuSeal Production
# Caddy automatically enables HTTPS with Let's Encrypt

# Main domain configuration
{$DOMAIN:localhost} {
    # Reverse proxy to DocuSeal app
    reverse_proxy app:3000 {
        # Health check
        health_uri /
        health_interval 30s
        health_timeout 10s

        # Load balancing (if scaling horizontally)
        lb_policy round_robin

        # Headers passed to upstream
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
        header_up X-Forwarded-Host {host}
    }

    # Enable gzip/brotli compression
    encode zstd gzip

    # Security headers
    header {
        # Enable HSTS (HTTP Strict Transport Security)
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

        # Prevent clickjacking
        X-Frame-Options "SAMEORIGIN"

        # Prevent MIME type sniffing
        X-Content-Type-Options "nosniff"

        # XSS Protection
        X-XSS-Protection "1; mode=block"

        # Referrer Policy
        Referrer-Policy "strict-origin-when-cross-origin"

        # Remove server header
        -Server
    }

    # Rate limiting (adjust as needed)
    rate_limit {
        zone dynamic_zone {
            key {remote_host}
            events 100
            window 1m
        }
    }

    # Static files caching (images, CSS, JS)
    @static {
        path *.ico *.css *.js *.gif *.jpg *.jpeg *.png *.svg *.woff *.woff2 *.ttf *.eot
    }
    header @static Cache-Control "public, max-age=31536000, immutable"

    # PDF files caching
    @pdfs {
        path *.pdf
    }
    header @pdfs Cache-Control "public, max-age=86400"

    # Logging
    log {
        output file /data/logs/access.log {
            roll_size 100mb
            roll_keep 5
            roll_keep_for 720h
        }
        format json
        level INFO
    }

    # Handle errors
    handle_errors {
        respond "{err.status_code} {err.status_text}"
    }
}

# Redirect www to non-www (if DOMAIN is set and not localhost)
www.{$DOMAIN:localhost} {
    redir https://{$DOMAIN}{uri} permanent
}
